{"ast":null,"code":"var _jsxFileName = \"C:\\\\++Cvele\\\\++B2B\\\\Project\\\\B2B\\\\buyer\\\\src\\\\components\\\\shared\\\\Modal.jsx\";\n// react\nimport React, { Component } from 'react'; // third-party\n\nimport PropTypes from 'prop-types';\nexport class Modal extends Component {\n  constructor(props) {\n    super();\n\n    this.handleOutsideClick = evt => {\n      const area = ReactDOM.findDOMNode(this.refs.area);\n\n      if (!area.contains(evt.target)) {\n        this.props.onClickOutside(evt);\n      }\n    };\n\n    this.renderModal = () => {\n      const showHideClassName = this.state.show ? \"modal display-block\" : \"modal display-none\";\n      return React.createElement(\"div\", {\n        className: showHideClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"modal-main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.props.children, React.createElement(\"button\", {\n        onClick: this.state.onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"close\")));\n    };\n\n    this.state = {\n      name: props.name,\n      show: props.show,\n      children: props.children,\n      onClose: props.onClose\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('click', this.handleOutsideClick);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleOutsideClick);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.renderModal());\n  }\n\n}\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClickOutside: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["C:/++Cvele/++B2B/Project/B2B/buyer/src/components/shared/Modal.jsx"],"names":["React","Component","PropTypes","Modal","constructor","props","handleOutsideClick","evt","area","ReactDOM","findDOMNode","refs","contains","target","onClickOutside","renderModal","showHideClassName","state","show","children","onClose","name","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","render","propTypes","node","isRequired","func"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AACjCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;;AADe,SAwBnBC,kBAxBmB,GAwBGC,GAAD,IAAS;AAC1B,YAAMC,IAAI,GAAGC,QAAQ,CAACC,WAAT,CAAqB,KAAKC,IAAL,CAAUH,IAA/B,CAAb;;AAEA,UAAI,CAACA,IAAI,CAACI,QAAL,CAAcL,GAAG,CAACM,MAAlB,CAAL,EAAgC;AAC5B,aAAKR,KAAL,CAAWS,cAAX,CAA0BP,GAA1B;AACH;AACJ,KA9BkB;;AAAA,SAgCnBQ,WAhCmB,GAgCL,MAAM;AAChB,YAAMC,iBAAiB,GAAG,KAAKC,KAAL,CAAWC,IAAX,GAAkB,qBAAlB,GAA0C,oBAApE;AAEA,aACI;AAAK,QAAA,SAAS,EAAEF,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAS,QAAA,SAAS,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKX,KAAL,CAAWc,QADhB,EAEI;AAAQ,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,CADJ,CADJ;AAUH,KA7CkB;;AAGf,SAAKH,KAAL,GAAa;AACTI,MAAAA,IAAI,EAAEhB,KAAK,CAACgB,IADH;AAETH,MAAAA,IAAI,EAAEb,KAAK,CAACa,IAFH;AAGTC,MAAAA,QAAQ,EAAEd,KAAK,CAACc,QAHP;AAITC,MAAAA,OAAO,EAAEf,KAAK,CAACe;AAJN,KAAb;AAMH;;AAODE,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKlB,kBAAxC;AACH;;AAEDmB,EAAAA,oBAAoB,GAAG;AACnBF,IAAAA,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsC,KAAKpB,kBAA3C;AACH;;AAyBDqB,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKZ,WAAL,EADL,CADJ;AAMH;;AAvDgC;AAAxBZ,K,CAYFyB,S,GAAY;AACfT,EAAAA,QAAQ,EAAEjB,SAAS,CAAC2B,IAAV,CAAeC,UADV;AAEfhB,EAAAA,cAAc,EAAEZ,SAAS,CAAC6B,IAAV,CAAeD;AAFhB,C","sourcesContent":["// react\nimport React, { Component } from 'react';\n\n// third-party\nimport PropTypes from 'prop-types';\n\nexport class Modal extends Component {\n    constructor(props) {\n        super();\r\n\r\n        this.state = {\r\n            name: props.name,\r\n            show: props.show,\r\n            children: props.children,\r\n            onClose: props.onClose\r\n        }\r\n    }\n\n    static propTypes = {\r\n        children: PropTypes.node.isRequired,\r\n        onClickOutside: PropTypes.func.isRequired\r\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.handleOutsideClick);\r\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.handleOutsideClick);\r\n    }\n\n    handleOutsideClick = (evt) => {\n        const area = ReactDOM.findDOMNode(this.refs.area);\r\n\r\n        if (!area.contains(evt.target)) {\r\n            this.props.onClickOutside(evt)\r\n        }\r\n    };\n\n    renderModal = () => {\n        const showHideClassName = this.state.show ? \"modal display-block\" : \"modal display-none\";\n        \n        return (\n            <div className={showHideClassName}>\n                <section className=\"modal-main\">\n                    {this.props.children}\n                    <button onClick={this.state.onClose}>\n                        close\n                    </button>\n                </section>\n            </div>\n        );\r\n    }\n    \n    render() {\n        return (\n            <React.Fragment>\n                {this.renderModal()}\n            </React.Fragment>\n        );\n        \r\n    }\n}"]},"metadata":{},"sourceType":"module"}