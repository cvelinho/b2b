{"ast":null,"code":"var _jsxFileName = \"C:\\\\++Cvele\\\\++B2B\\\\Project\\\\B2B\\\\buyer\\\\src\\\\components\\\\header\\\\Indicator.jsx\";\n// react\nimport React, { Component } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass Indicator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setWrapperRef = node => {\n      this.wrapperRef = node;\n    };\n\n    this.handleOutsideClick = event => {\n      const open = this.state.open;\n\n      if (this.wrapperRef && !this.wrapperRef.contains(event.target) && open) {\n        this.close();\n      }\n    };\n\n    this.handleButtonClick = event => {\n      const _this$props = this.props,\n            onClick = _this$props.onClick,\n            dropdown = _this$props.dropdown;\n\n      if (dropdown) {\n        event.preventDefault();\n      }\n\n      this.toggle();\n\n      if (onClick) {\n        onClick(event);\n      }\n    };\n\n    this.state = {\n      open: false\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleOutsideClick);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const open = this.state.open;\n    const _this$props2 = this.props,\n          onOpen = _this$props2.onOpen,\n          onClose = _this$props2.onClose;\n\n    if (open !== prevState.open) {\n      if (open && onOpen) {\n        onOpen();\n      }\n\n      if (!open && onClose) {\n        onClose();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleOutsideClick);\n  }\n\n  toggle() {\n    this.setState(state => ({\n      open: !state.open\n    }));\n  }\n\n  open() {\n    this.setState(() => ({\n      open: true\n    }));\n  }\n\n  close() {\n    this.setState(() => ({\n      open: false\n    }));\n  }\n\n  render() {\n    const open = this.state.open;\n    const _this$props3 = this.props,\n          url = _this$props3.url,\n          icon = _this$props3.icon;\n    let _this$props4 = this.props,\n        value = _this$props4.value,\n        dropdown = _this$props4.dropdown;\n    let button;\n\n    if (value !== undefined) {\n      value = React.createElement(\"span\", {\n        className: \"indicator__value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, value);\n    }\n\n    const title = React.createElement(\"span\", {\n      className: \"indicator__area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, icon, React.createElement(\"span\", {\n      className: \"indicator__value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"10\"));\n\n    if (url) {\n      button = React.createElement(Link, {\n        to: url,\n        className: \"indicator__button\",\n        onClick: this.handleButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, title);\n    } else {\n      button = React.createElement(\"button\", {\n        type: \"button\",\n        className: \"indicator__button\",\n        onClick: this.handleButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, title);\n    }\n\n    if (dropdown) {\n      dropdown = React.createElement(\"div\", {\n        className: \"indicator__dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, dropdown);\n    }\n\n    const classes = classNames(\"indicator indicator--trigger--click\", {\n      'indicator--opened': open\n    });\n    return React.createElement(\"div\", {\n      className: classes,\n      ref: this.setWrapperRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, button, dropdown);\n  }\n\n}\n\nIndicator.propTypes = {\n  /** indicator value */\n  value: PropTypes.number,\n\n  /** the component that will be shown in the dropdown */\n  dropdown: PropTypes.node,\n\n  /** indicator icon */\n  icon: PropTypes.node,\n\n  /** indicator url */\n  url: PropTypes.string,\n\n  /** callback function that is called when the dropdown is opened */\n  onOpen: PropTypes.func,\n\n  /** callback function that is called when the dropdown is closed */\n  onClose: PropTypes.func\n};\nexport default Indicator;","map":{"version":3,"sources":["C:/++Cvele/++B2B/Project/B2B/buyer/src/components/header/Indicator.jsx"],"names":["React","Component","classNames","PropTypes","Link","Indicator","constructor","props","setWrapperRef","node","wrapperRef","handleOutsideClick","event","open","state","contains","target","close","handleButtonClick","onClick","dropdown","preventDefault","toggle","componentDidMount","document","addEventListener","componentDidUpdate","prevProps","prevState","onOpen","onClose","componentWillUnmount","removeEventListener","setState","render","url","icon","value","button","undefined","title","classes","propTypes","number","string","func"],"mappings":"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","sourcesContent":["// react\nimport React, { Component } from 'react';\n\n// third-party\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n\nclass Indicator extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleOutsideClick);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { open } = this.state;\n        const { onOpen, onClose } = this.props;\n\n        if (open !== prevState.open) {\n            if (open && onOpen) {\n                onOpen();\n            }\n            if (!open && onClose) {\n                onClose();\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleOutsideClick);\n    }\n\n    setWrapperRef = (node) => {\n        this.wrapperRef = node;\n    };\n\n    handleOutsideClick = (event) => {\n        const { open } = this.state;\n\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target) && open) {\n            this.close();\n        }\n    };\n\n    handleButtonClick = (event) => {\n        const { onClick, dropdown } = this.props;\n\n        if (dropdown) {\n            event.preventDefault();\n        }\n\n        this.toggle();\n\n        if (onClick) {\n            onClick(event);\n        }\n    };\n\n    toggle() {\n        this.setState((state) => ({\n            open: !state.open,\n        }));\n    }\n\n    open() {\n        this.setState(() => ({\n            open: true,\n        }));\n    }\n\n    close() {\n        this.setState(() => ({\n            open: false,\n        }));\n    }\n\n    render() {\n        const { open } = this.state;\n        const { url, icon } = this.props;\n        let { value, dropdown } = this.props;\n        let button;\n\n        if (value !== undefined) {\n            value = <span className=\"indicator__value\">{value}</span>;\n        }\n\n        const title = (\n            <span className=\"indicator__area\">\n                {icon}\n                {/*{value}*/}\n                <span className=\"indicator__value\">10</span>\n            </span>\n        );\n\n        if (url) {\n            button = (\n                <Link to={url} className=\"indicator__button\" onClick={this.handleButtonClick}>\n                    {title}\n                </Link>\n            );\n        } else {\n            button = (\n                <button type=\"button\" className=\"indicator__button\" onClick={this.handleButtonClick}>\n                    {title}\n                </button>\n            );\n        }\n\n        if (dropdown) {\n            dropdown = (\n                <div className=\"indicator__dropdown\">\n                    {dropdown}\n                </div>\n            );\n        }\n\n        const classes = classNames(`indicator indicator--trigger--click`, {\n            'indicator--opened': open,\n        });\n\n        return (\n            <div className={classes} ref={this.setWrapperRef}>\n                {button}\n                {dropdown}\n            </div>\n        );\n    }\n}\n\nIndicator.propTypes = {\n    /** indicator value */\n    value: PropTypes.number,\n    /** the component that will be shown in the dropdown */\n    dropdown: PropTypes.node,\n    /** indicator icon */\n    icon: PropTypes.node,\n    /** indicator url */\n    url: PropTypes.string,\n    /** callback function that is called when the dropdown is opened */\n    onOpen: PropTypes.func,\n    /** callback function that is called when the dropdown is closed */\n    onClose: PropTypes.func,\n};\n\nexport default Indicator;\n"]},"metadata":{},"sourceType":"module"}